---
   - name: If an environment variable named "DOCKER_HOST" is set on the playbook controller, then print the value.
     ansible.builtin.debug:
       msg: "'{{ docker_host }}' is the DOCKER_HOST environment variable."
     when: "'{{ lookup('ansible.builtin.env', 'DOCKER_HOST') }} is defined'"

   - name: get content of remote file
     slurp:
       src: "{{os_info_path}}"
     register: remote_content_encoded

   - name: decode remote content
     set_fact:
       remote_os_info: "{{remote_content_encoded.content | b64decode}}"

   - debug:
       msg: "content of remote file {{os_info_path}}: {{remote_os_info}}"

   - name: deactivate wlan1 if its on
     command: ip link set wlan1 down
     when: int_count != '3'
     tags: AnsibleHousekeeping 

   - name: wipe /var/cache/apt/* 
     file:
       path: /var/cache/apt/
     tags: AnsibleHousekeeping 
  
   - name: Copy /usr/local/etc/ files over to target *currently this is the hotspot version file*
     ansible.builtin.copy:
       src: "{{ root_playbook_dir }}/usr/local/etc/device.ver"
       dest: /boot/device.ver
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: Increment /boot/device.ver contents to reflect build version
     lineinfile:
       path: /boot/device.ver
       regexp: '^Ver:.*'
       line: "Ver: {{ version['Ver'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: Increment /boot/device.ver contents to reflect build Author
     lineinfile:
       path: /boot/device.ver
       regexp: '^Author:.*'
       line: "Author: {{ version['Author'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: Increment /boot/device.ver contents to reflect build date
     lineinfile:
       path: /boot/device.ver
       regexp: '^BuildDate:.*'
       line: "BuildDate: {{ version['BuildDate'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration
     
   - name: Increment /boot/device.ver contents to reflect build Name
     lineinfile:
       path: /boot/device.ver
       regexp: '^Build:.*'
       line: "Build: {{ version['Build'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: disable powersave mode on wlan0 (Reduces possibility of intermittent connectivity loss due to powersaving)
     command: iwconfig wlan0 power off
     tags: AnsibleHousekeeping 

   - name: Synchronization of files for apt client (configures target device to use builderhotspot's proxies.)
     ansible.builtin.copy: 
       src: "{{ root_playbook_dir }}/etc/apt"
       dest: /tmp/

   - name: install dependencies for some things that I don't recall the motivation for
     apt:
       name: "{{item}}"
       state: present
       update_cache: yes
     loop:
         - apt-transport-https
         - ca-certificates
         - curl
         - gnupg-agent
         - software-properties-common
     tags: 
     - DeviceRegistration
     - UnknownDependencies

   - name: resolv.conf.head file
     copy:
       src: "{{ root_playbook_dir }}/etc/resolv.conf.head"
       dest: /etc/resolv.conf.head
       owner: root
       group: root
       mode: 0600
     tags: streamer

   - name: Overwrite /etc/apt/sources.list to use builderhotspot's general apt-related proxies.
     command: cp /tmp/apt/sources.list.pre /etc/apt/sources.list

   - name: Overwrite /etc/apt/sources.list.d/raspi.list to use builderhotspot's raspbian-related proxies.
     command: cp /tmp/apt/sources.list.d/raspi.list.pre /etc/apt/sources.list.d/raspi.list

   - name: Modify the /etc/apt/sources.list.pre apt source if the playbook host has DOCKER_HOST environmental variable
     ansible.builtin.replace:
       path: /etc/apt/sources.list
       regexp: '(?:10.6.6.1)'
       replace: "{{ docker_host }}"
     when: "'{{ lookup('ansible.builtin.env', 'DOCKER_HOST') }} is defined'"

   - name: Modify the /etc/apt/sources.list.d/raspi.list apt source if the playbook host has DOCKER_HOST environmental variable
     ansible.builtin.replace:
       path: /etc/apt/sources.list.d/raspi.list
       regexp: '(?:10.6.6.1)'
       replace: "{{ docker_host }}"
     when: "'{{ lookup('ansible.builtin.env', 'DOCKER_HOST') }} is defined'"

   - name: Run the equivilent of apt-get update
     apt:
       update_cache: yes 

   - name: Update all packages (install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list on the target system)
     apt:
       upgrade: dist
     tags: AnsibleHousekeeping 

   - name: upgrade pip (PIP3 is required for modern ansible)
     command: python -m pip install --upgrade pip
     tags: hotspot

   - name: "install python runtime&build dependencies.  (Ensures we have Python {{py_version}}, which is needed for long term ansible support)."
     apt:
       name: ['build-essential', 'tk-dev', 'libncurses5-dev', 'libncursesw5-dev', 'libreadline6-dev','libdb5.3-dev', 'libgdbm-dev', 'libsqlite3-dev', 'libssl-dev', 'libbz2-dev', 'libexpat1-dev', 'liblzma-dev', 'zlib1g-dev', 'libffi-dev']

   - name: "Download python{{py_version}}"
     get_url:
       url="https://www.python.org/ftp/python/{{py_version}}/Python-{{py_version}}.tar.xz"
       dest="/tmp/Python-{{py_version}}.tar.xz"

   - name: "Unarchive downloaded python"
     unarchive:
       src="/tmp/Python-{{py_version}}.tar.xz"
       dest="/tmp/"
       copy=no
       creates="/tmp/Python-{{py_version}}"

   - name: "configure python{{py_version}} build"
     command: ./configure
     args:
       chdir: "/tmp/Python-{{py_version}}"
       creates: "/tmp/Python-{{py_version}}/Makefile"

   - name: "build python{{py_version}}"
     # not using make module to be able to use -j and creates option to fully skip step
     command: make -j{{threads}}
     args:
       chdir: "/tmp/Python-{{py_version}}"
       creates: "/tmp/Python-{{py_version}}/python"

   - name: "Finally, install the python build we pulled & compiled!"
     make:
       chdir: "/tmp/Python-{{py_version}}"
       target: altinstall

   - name: Create desktop background file
     ansible.builtin.copy:
       src: "{{ root_playbook_dir }}/pi/ula_bear.jpeg"
       dest: /home/pi/Pictures/Desktop.JPG
       owner: pi
       group: pi
       mode: 0644
     tags: 
     - streamer
     - os_config_files

   - name: set the new desktop background 
     lineinfile:
              # changed location in rasbpian buster.  Old location:
              # path: /home/pi/.config/pcmanfm/LXDE-pi/desktop-items-0.conf
       path: /etc/xdg/pcmanfm/LXDE-pi/desktop-items-0.conf
       regexp: '(wallpaper=.+)'
       line: 'wallpaper=/home/pi/Pictures/Desktop.JPG'
     tags: os_config_files


   - name: Copy LXDE-pi file that autolaunches chrome 
     copy:
       src: "{{ root_playbook_dir }}/pi/config/lxsession/LXDE-pi/autostart"
       dest: /etc/xdg/lxsession/LXDE-pi/autostart
       owner: pi
       group: pi
       mode: 0644
     tags: os_config_files

   - name: Copy LXDE-pi file that does not autostart chrome 
     copy:
       src: "{{ root_playbook_dir }}/pi/config/lxsession/LXDE-pi/autostart_ui_off"
       dest: /etc/xdg/lxsession/.autostart_ui_off
       owner: pi
       group: pi
       mode: 0644
     tags: os_config_files

   - name: Copy chromium settings
     copy:
       src: "{{ root_playbook_dir }}/pi/config/chromium/"
       dest: /home/pi/.config/chromium/
       owner: pi
       group: pi
       mode: 0600
     tags: web_ui

   - name: Create /home/pi/.config directory
     file: path=/home/pi/.config state=directory mode=0755 owner=pi group=pi
     tags: os_config_files

   - name: Copy device registration scripts 
     synchronize:
       src: "{{ root_playbook_dir }}/bin/register.sh"
       dest: /bin/.
     tags: DeviceRegistration

   - name: Install iptables-persistent
     apt:
       pkg: iptables-persistent
       state: present
       update_cache: true
     tags: captiveportal

   - name: Install gparted
     apt:
       name: gparted
       state: present
       update_cache: true
     tags: AnsibleHousekeeping

   - name: Install Vim
     apt:
       name: vim
       state: present
       update_cache: true
     tags: os_config_files

   - name: Install lightdm desktop manager
     apt:
       name: lightdm
       state: present
       update_cache: true
     tags: os_config_files

   - name: Install git 
     apt:
       name: git
       state: present
       update_cache: true
     tags: AnsibleHousekeeping


   - name: Install ncdu
     apt:
       name: ncdu
       state: present
       update_cache: true
     tags: os_config_files

   - name: Install lshw
     apt:
       name: lshw
       state: present
       update_cache: true
     tags: os_config_files

#this probably should be disabled.
   - name: Activate IP Forwarding
     command: sysctl net.ipv4.ip_forward
     tags: networking

   - name: make ip forwarding rules permanant
     command: sysctl -p /etc/sysctl.conf
     tags: os_config_files


   - name: Create /etc/environment file for setting system-wide environment variables
     copy:
       src: "{{ root_playbook_dir }}/etc/environment"
       dest: /etc/environment
       owner: root
       group: root
       mode: 0644
        # tags: should be set to base after testing.
        # This change requires a device reboot to access.
     tags: custom_scripts

   - name: Create /usr/local/etc directory
     file: path=/usr/local/etc state=directory mode=0755 owner=root group=root
     tags: os_config_files

   - name: Copy /etc/interfaces file #Likely needs updates if I change interfaces
     copy:
       src: "{{ root_playbook_dir }}/etc/interfaces"
       dest: /etc/interfaces
       owner: root
       group: root
       mode: 0644
     tags: 
     - os_config_files
     - CaptivePortal
     - Hotspot

   - name: Copy /etc/sysctl.conf file which disables ipv6 on the device
     copy:
       src: "{{ root_playbook_dir }}/etc/sysctl.conf"
       dest: /etc/sysctl.conf
       owner: root
       group: root
       mode: 0644
     tags: 
     - LearnLinux
     - DisableIpV6

   - name: Copy 72-wlan-geo-dependent.rules script that forces the onboard interface to be wlan0.  This is done because interface names are by default dynamically allocated, which can disrupt attempts to configure correct firewall rules & routing
     copy:
       src: "{{ root_playbook_dir }}/etc/udev/rules.d/72-wlan-geo-dependent.rules"
       dest: /etc/udev/rules.d/72-wlan-geo-dependent.rules
       owner: root
       group: root
       mode: 0644
     tags: os_config_files

   - name: Copy the /etc/dhcpcd.conf file which makes sure wlan0 has a static ip
     copy:
       src: "{{ root_playbook_dir }}/etc/dhcpcd.conf"
       dest: /etc/dhcpcd.conf
       owner: root
       group: netdev
       mode: 0664
     tags: 
     - os_config_files
     - streamer

   - name: Copy /etc/dhcpcd.conf file #Likely needs updates if I change interfaces
     copy:
       src: "{{ root_playbook_dir }}/etc/dhcpcd.conf"
       dest: /etc/dhcpcd.conf
       owner: root
       group: netdev
       mode: 0664
     tags: os_config_files

   - name: Copy /etc/host.conf file 
     copy:
       src: "{{ root_playbook_dir }}/etc/host.conf"
       dest: /etc/host.conf
       owner: root
       group: root
       mode: 0644
     tags: os_config_files

   - name: Copy naked /etc/wpa_supplicant/wpa_supplicant.conf file 
     copy:
       src: "{{ root_playbook_dir }}/etc/wpa_supplicant/wpa_supplicant.conf"
       dest: /etc/wpa_supplicant/wpa_supplicant.conf
       owner: root
       group: root
       mode: 0644
     tags: os_config_files

   - name: Copy /etc/hosts file #Likely needs updates if I change interfaces
     copy:
       src: "{{ root_playbook_dir }}/etc/hosts"
       dest: /etc/hosts
       owner: root
       group: root
       mode: 0755
     tags: os_config_files

   - name: Copy /etc/hostname file #Likely needs updates if I change interfaces
     copy:
       src: "{{ root_playbook_dir }}/etc/hostname"
       dest: /etc/hostname
       owner: root
       group: root
       mode: 0755
     tags: os_config_files

   - name: add Python3 alias to .bashrc
     become: true
     become_user: pi
     lineinfile:
       path: .bashrc
       line: 'alias python=python3'
     tags: os_config_files

   - name: source bashrc (I'm suspicious I don't need this step)
     become: true
     become_user: pi
     shell: . /home/pi/.bashrc && ls
     tags: os_config_files

   - name: copy the /usr/local/bin/ClearLogs.sh script which clears the logs of the system
     copy:
       src: "{{ root_playbook_dir }}/usr/local/bin/ClearLogs.sh"
       dest: /usr/local/bin/ClearLogs.sh
       owner: root
       group: root
       mode: 0744
     tags: 
     - os_config_files
     - AnsibleHousekeeping

   - name: chmoding /usr/local/bin/ClearLogs.sh
     file:
       path: /usr/local/bin/ClearLogs.sh
       owner: root
       group: root
       # when specifying mode using octal numbers, add a leading 0
       mode: 0755
     tags: 
     - os_config_files
     - AnsibleHousekeeping

   - name: Copy /etc/modprobe.d/8192cu.conf file that prevents power saving on wlan0
     copy:
       src: "{{ root_playbook_dir }}/etc/modprobe.d/8192cu.conf"
       dest: /etc/modprobe.d/8192cu.conf
       owner: root
       group: root
       mode: 0644
     tags: new

   - name: resolv.conf.head file
     copy:
       src: "{{ root_playbook_dir }}/etc/resolv.conf.head"
       dest: /etc/resolv.conf.head
       owner: root
       group: root
       mode: 0600
     tags: LearnLinuxNetworkingHacking

   - name: Copy systemd timers & services files for device registration
     become_user: pi
     copy:
       src: "{{ root_playbook_dir }}/pi/config/systemd"
       dest: /home/pi/.config/
       mode: 0700
       owner: pi
     tags: 
     - DeviceRegistration

   - name: enable device registration service so it launches after reboot
     become_user: pi
     command: systemctl --user enable register-device.service # no now switch because I don't want to run it
     tags: DeviceRegistration

   - name: enable device registration timer so it launches after reboot
     become_user: pi
     command: systemctl --user enable register-device.timer
     tags: DeviceRegistration

   - name: Copy /usr/local/etc/ files over to target *currently this is the hotspot version file*
     ansible.builtin.copy:
       src: "{{ root_playbook_dir }}/usr/local/etc/device.ver"
       dest: /boot/device.ver
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: Increment /boot/device.ver contents to reflect build version
     lineinfile:
       path: /boot/device.ver
       regexp: '^Ver:.*'
       line: "Ver: {{ version['Ver'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: Increment /boot/device.ver contents to reflect build Author
     lineinfile:
       path: /boot/device.ver
       regexp: '^Author:.*'
       line: "Author: {{ version['Author'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: Increment /boot/device.ver contents to reflect build date
     lineinfile:
       path: /boot/device.ver
       regexp: '^BuildDate:.*'
       line: "BuildDate: {{ version['BuildDate'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: Increment /boot/device.ver contents to reflect build Name
     lineinfile:
       path: /boot/device.ver
       insertbefore: </body>
       line: "Build: {{ version['Build'] }}"
     tags: 
     - os_config_files
     - DeviceRegistration

   - name: enable device registration timer so it launches after reboot
     become_user: pi
     command: systemctl --user enable register-device.service # no now switch because I don't want to run it
     tags: DeviceRegistration

   - name: enable device registration timer so it launches after reboot
     become_user: pi
     command: systemctl --user enable register-device.timer
     tags: DeviceRegistration

